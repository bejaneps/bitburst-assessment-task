// Code generated by sqlc. DO NOT EDIT.
// source: objects.sql

package objects

import (
	"context"

	"github.com/lib/pq"
)

const deleteNotSeenObjects = `-- name: DeleteNotSeenObjects :many
DELETE
FROM
	bitburst."objects"
WHERE
	last_seen < CURRENT_TIMESTAMP - INTERVAL '30 seconds' RETURNING o_id
`

func (q *Queries) DeleteNotSeenObjects(ctx context.Context) ([]int32, error) {
	rows, err := q.query(ctx, q.deleteNotSeenObjectsStmt, deleteNotSeenObjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var o_id int32
		if err := rows.Scan(&o_id); err != nil {
			return nil, err
		}
		items = append(items, o_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertObjectsOrUpdate = `-- name: InsertObjectsOrUpdate :many
INSERT INTO bitburst."objects" ( o_id, online )
VALUES ( UNNEST($1::INT[]), UNNEST($2::BOOLEAN[]) ) ON CONFLICT ( o_id ) DO
UPDATE
	SET last_seen = CURRENT_TIMESTAMP,
		online = EXCLUDED.online
	RETURNING o_id
`

type InsertObjectsOrUpdateParams struct {
	Column1 []int32 `json:"column_1"`
	Column2 []bool  `json:"column_2"`
}

func (q *Queries) InsertObjectsOrUpdate(ctx context.Context, arg InsertObjectsOrUpdateParams) ([]int32, error) {
	rows, err := q.query(ctx, q.insertObjectsOrUpdateStmt, insertObjectsOrUpdate, pq.Array(arg.Column1), pq.Array(arg.Column2))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var o_id int32
		if err := rows.Scan(&o_id); err != nil {
			return nil, err
		}
		items = append(items, o_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
