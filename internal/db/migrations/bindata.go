// Code generated by go-bindata. DO NOT EDIT.
//  memcopy: true
//  compress: true
//  decompress: once
//  asset-dir: true
//  restore: true
// sources:
//  internal/db/migrations/1_create_schema_bitburst.down.sql
//  internal/db/migrations/1_create_schema_bitburst.up.sql
//  internal/db/migrations/2_create_table_objects.down.sql
//  internal/db/migrations/2_create_table_objects.up.sql

package migrations

import (
	"bytes"
	"compress/flate"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tmthrgd/go-bindata/restore"
)

type asset struct {
	name string
	data string
	size int64

	once  sync.Once
	bytes []byte
	err   error
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return a.size
}

func (a *asset) Mode() os.FileMode {
	return 0
}

func (a *asset) ModTime() time.Time {
	return time.Time{}
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"1_create_schema_bitburst.down.sql": &asset{
		name: "1_create_schema_bitburst.down.sql",
		data: "" +
			"\x72\x09\xf2\x0f\x50\x08\x76\xf6\x70\xf5\x75\x54\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e" +
			"\x09\x56\x48\xca\x2c\x49\x2a\x2d\x2a\x2e\xb1\x06\x04\x00\x00\xff\xff",
		size: 35,
	},
	"1_create_schema_bitburst.up.sql": &asset{
		name: "1_create_schema_bitburst.up.sql",
		data: "" +
			"\x72\x0e\x72\x75\x0c\x71\x55\x08\x76\xf6\x70\xf5\x75\x54\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0" +
			"\x0c\x0e\x09\x56\x48\xca\x2c\x49\x2a\x2d\x2a\x2e\xb1\x06\x04\x00\x00\xff\xff",
		size: 37,
	},
	"2_create_table_objects.down.sql": &asset{
		name: "2_create_table_objects.down.sql",
		data: "" +
			"\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xca\x2c" +
			"\x49\x2a\x2d\x2a\x2e\xd1\x53\xca\x4f\xca\x4a\x4d\x2e\x29\x56\x52\x70\x76\x0c\x76\x76\x74\x71\xb5" +
			"\x06\x04\x00\x00\xff\xff",
		size: 48,
	},
	"2_create_table_objects.up.sql": &asset{
		name: "2_create_table_objects.up.sql",
		data: "" +
			"\x54\xcb\xc1\x8a\x83\x30\x14\x46\xe1\xb5\x79\x8a\x1f\x57\x33\x20\xf3\x02\xb3\x8a\xf6\x5a\x42\x63" +
			"\x94\xeb\x0d\xd4\x6e\xa4\xb6\x59\x58\x44\xa1\x49\xdf\xbf\xd0\x85\xd0\xf5\xf9\x4e\xc5\xa4\x85\x20" +
			"\xba\xb4\x04\x53\xc3\xb5\x02\x3a\x9b\x5e\x7a\x4c\x73\x9a\x5e\xcf\x98\xfe\xf2\x6d\x7a\x84\x5b\x8a" +
			"\x39\x7e\x54\xb6\x8d\xf3\x1d\xc6\x09\x1d\x89\xd1\xb1\x69\x34\x0f\x38\xd1\xf0\x39\x9d\xb7\xb6\x50" +
			"\xd9\xb6\x2e\xf3\x1a\x50\xb6\xad\x25\xed\xf6\x82\x03\xd5\xda\x5b\x81\xb0\xa7\x42\x65\xcb\x35\xa6" +
			"\x31\x86\xb0\x42\x4c\x43\xbd\xe8\xa6\x93\xcb\xb7\xac\x3c\x33\x39\x19\x77\xa0\x7e\xff\xdf\x01\x00" +
			"\x00\xff\xff",
		size: 179,
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	a.once.Do(func() {
		fr := flate.NewReader(strings.NewReader(a.data))

		var buf bytes.Buffer
		if _, a.err = io.Copy(&buf, fr); a.err != nil {
			return
		}

		if a.err = fr.Close(); a.err == nil {
			a.bytes = buf.Bytes()
		}
	})
	if a.err != nil {
		return nil, nil, &os.PathError{Op: "read", Path: name, Err: a.err}
	}

	return a.bytes, a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	return restore.Asset(dir, name, AssetAndInfo)
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	return restore.Assets(dir, name, AssetDir, AssetAndInfo)
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree

	if name != "" {
		var ok bool
		for _, p := range strings.Split(filepath.ToSlash(name), "/") {
			if node, ok = node[p]; !ok {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}

	if len(node) == 0 {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	rv := make([]string, 0, len(node))
	for name := range node {
		rv = append(rv, name)
	}

	return rv, nil
}

type bintree map[string]bintree

var _bintree = bintree{
	"1_create_schema_bitburst.down.sql": bintree{},
	"1_create_schema_bitburst.up.sql":   bintree{},
	"2_create_table_objects.down.sql":   bintree{},
	"2_create_table_objects.up.sql":     bintree{},
}
